import { Component, OnInit, Input, AfterViewInit, ElementRef, ViewChild } from '@angular/core';

const _codeExampleInputs = ['language', 'escape', 'format', 'showcase', 'animated'];

// prettify.js from the vendor folder.
declare var prettyPrint;

/**
 * Angular.io Code Example
 *
 * Pretty renders a code block, primarily used in the docs and API reference. Can be used within an Angular app, or
 * independently, provided that it is dynamically generated by the component resolver.
 *
 * Usage:
 *   <code-example [language]="..." [escape]="..." [format]="..." [showcase]="..." [animated]="...">
 *     console.log('Hello World')
 *   </code-example>
 */
@Component({
  selector: 'code-example',
  templateUrl: 'code-example.component.html',
  inputs: _codeExampleInputs
})
export class CodeExampleComponent implements OnInit, AfterViewInit {
  @ViewChild('innerContent') innerContent: ElementRef;
  
  /*@Input()*/ language: string; // could be javascript, dart, typescript
  /*@Input()*/ escape: string; // could be 'html'
  /*@Input()*/ format: string; // some css class
  /*@Input()*/ showcase: string; // a string with the value 'true'
  /*@Input()*/ animated: boolean = false;
  
  classes: string;
  animatedClasses: string;
  
  constructor(private elementRef: ElementRef) {
    // Manually get @Input's:
    _codeExampleInputs.forEach(inputName => {
      if (!this[inputName]) this[inputName] = this.elementRef.nativeElement.getAttribute(inputName);
    });
  }

  ngOnInit() {    
    const showcaseClass = this.showcase === 'true' ? ' is-showcase' : '';
    this.classes = `
      prettyprint 
      ${this.format ? this.format : ''} 
      ${this.language ? 'lang-' + this.language : '' } 
      ${showcaseClass ? showcaseClass : ''}
    `.trim();
    
    this.animatedClasses = `${this.animated ? 'animated fadeIn' : ''}`;
    
    this.innerContent.nativeElement.innerHTML = this.elementRef.nativeElement.codeExampleContent;
  }

  ngAfterViewInit() {
    // whenever a code example is used, use syntax highlighting.
    if(prettyPrint) {
      prettyPrint();
    }
  }
}
